package budget.gui.imageJ;

import java.awt.*;
import java.awt.event.*;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import java.util.*;

/**
 * This class is a customizable modal dialog box. Here is an example
 * GenericDialog with one string field and two numeric fields:
 * 
 * <pre>
 * public class Generic_Dialog_Example implements PlugIn {
 * 	static String title = "Example";
 * 	static int width = 512, height = 512;
 * 
 * 	public void run(String arg) {
 * 		GenericDialog gd = new GenericDialog("New Image");
 * 		gd.addStringField("Title: ", title);
 * 		gd.addNumericField("Width: ", width, 0);
 * 		gd.addNumericField("Height: ", height, 0);
 * 		gd.showDialog();
 * 		if (gd.wasCanceled())
 * 			return;
 * 		title = gd.getNextString();
 * 		width = (int) gd.getNextNumber();
 * 		height = (int) gd.getNextNumber();
 * 		IJ.newImage(title, "8-bit", width, height, 1);
 * 	}
 * }
 * </pre>
 * 
 * To work with macros, the first word of each component label must be unique.
 * If this is not the case, add underscores, which will be converted to spaces
 * when the dialog is displayed. For example, change the checkbox labels "Show
 * Quality" and "Show Residue" to "Show_Quality" and "Show_Residue".
 */
public class GenericDialog extends Dialog implements ActionListener, TextListener, FocusListener, ItemListener, KeyListener, AdjustmentListener, WindowListener {

	public interface DialogListener {

		/**
		 * This method is invoked by a Generic Dialog if any of the inputs have
		 * changed (CANCEL does not trigger it; OK and running the dialog from a
		 * macro only trigger the first DialogListener added to a
		 * GenericDialog).
		 * 
		 * @param e
		 *            The event that has been generated by the user action in
		 *            the dialog. Note that <code>e</code> is <code>null</code>
		 *            if the dialogItemChanged method is called after the user
		 *            has pressed the OK button or if the GenericDialog has read
		 *            its parameters from a macro.
		 * @param gd
		 *            A reference to the GenericDialog.
		 * @return Should be true if the dialog input is valid. False disables
		 *         the OK button and preview (if any).
		 */
		boolean dialogItemChanged(GenericDialog gd, AWTEvent e);
	}

	protected Vector numberField, stringField, checkbox, choice, slider, radioButtonGroups;
	protected TextArea textArea1, textArea2;
	protected Vector defaultValues, defaultText, defaultStrings, defaultChoiceIndexes;
	protected Component theLabel;
	private Button cancel, okay, no, help;
	private String okLabel = "  OK  ";
	private String cancelLabel = "Cancel";
	private String helpLabel = "Help";
	private boolean wasCanceled, wasOKed;
	private int y;
	private int nfIndex, sfIndex, cbIndex, choiceIndex, textAreaIndex, radioButtonIndex;
	private GridBagLayout grid;
	private GridBagConstraints c;
	private boolean firstNumericField = true;
	private boolean firstSlider = true;
	private boolean invalidNumber;
	private String errorMessage;
	private Hashtable labels;
	private int topInset, leftInset, bottomInset;
	private boolean customInsets;
	private Vector sliderIndexes;
	private Vector sliderScales;
	private Vector dialogListeners; // the Objects to notify on user input
	private boolean yesNoCancel;
	private char echoChar;
	private boolean hideCancelButton;
	private boolean centerDialog = true;
	private String helpURL;
	private String yesLabel, noLabel;
	private boolean smartRecording;
	private static GenericDialog instance;
	private boolean firstPaint = true;

	/**
	 * Creates a new GenericDialog using the specified title and parent frame.
	 */
	public GenericDialog(String title, Frame parent) {
		super(parent == null ? new Frame() : parent, title, true);

		grid = new GridBagLayout();
		c = new GridBagConstraints();
		setLayout(grid);
		addKeyListener(this);
		addWindowListener(this);
	}

	/**
	 * Adds a numeric field. The first word of the label must be unique or
	 * command recording will not work.
	 * 
	 * @param label
	 *            the label
	 * @param defaultValue
	 *            value to be initially displayed
	 * @param digits
	 *            number of digits to right of decimal point
	 */
	public void addNumericField(String label, double defaultValue, int digits) {
		addNumericField(label, defaultValue, digits, 6, null);
	}

	/**
	 * Converts a number to a formatted string using 2 digits to the right of
	 * the decimal point.
	 */
	public static String d2s(double n) {
		return d2s(n, 2);
	}

	private static DecimalFormat[] sf;
	private static DecimalFormatSymbols dfs;
	private static DecimalFormat[] df;

	static {
		dfs = new DecimalFormatSymbols(Locale.US);
		df = new DecimalFormat[10];
		df[0] = new DecimalFormat("0", dfs);
		df[1] = new DecimalFormat("0.0", dfs);
		df[2] = new DecimalFormat("0.00", dfs);
		df[3] = new DecimalFormat("0.000", dfs);
		df[4] = new DecimalFormat("0.0000", dfs);
		df[5] = new DecimalFormat("0.00000", dfs);
		df[6] = new DecimalFormat("0.000000", dfs);
		df[7] = new DecimalFormat("0.0000000", dfs);
		df[8] = new DecimalFormat("0.00000000", dfs);
		df[9] = new DecimalFormat("0.000000000", dfs);
	}

	/**
	 * Converts a number to a rounded formatted string. The 'decimalPlaces'
	 * argument specifies the number of digits to the right of the decimal point
	 * (0-9). Uses scientific notation if 'decimalPlaces is negative.
	 */
	public static String d2s(double n, int decimalPlaces) {
		if (Double.isNaN(n) || Double.isInfinite(n))
			return "" + n;
		if (n == Float.MAX_VALUE) // divide by 0 in FloatProcessor
			return "3.4e38";
		if (decimalPlaces < 0)
			synchronized (GenericDialog.class) {
				decimalPlaces = -decimalPlaces;
				if (decimalPlaces > 9)
					decimalPlaces = 9;
				if (sf == null) {
					if (dfs == null)
						dfs = new DecimalFormatSymbols(Locale.US);
					sf = new DecimalFormat[10];
					sf[1] = new DecimalFormat("0.0E0", dfs);
					sf[2] = new DecimalFormat("0.00E0", dfs);
					sf[3] = new DecimalFormat("0.000E0", dfs);
					sf[4] = new DecimalFormat("0.0000E0", dfs);
					sf[5] = new DecimalFormat("0.00000E0", dfs);
					sf[6] = new DecimalFormat("0.000000E0", dfs);
					sf[7] = new DecimalFormat("0.0000000E0", dfs);
					sf[8] = new DecimalFormat("0.00000000E0", dfs);
					sf[9] = new DecimalFormat("0.000000000E0", dfs);
				}
				return sf[decimalPlaces].format(n); // use scientific notation
			}
		if (decimalPlaces < 0)
			decimalPlaces = 0;
		if (decimalPlaces > 9)
			decimalPlaces = 9;
		return df[decimalPlaces].format(n);
	}

	/**
	 * Adds a numeric field. The first word of the label must be unique or
	 * command recording will not work.
	 * 
	 * @param label
	 *            the label
	 * @param defaultValue
	 *            value to be initially displayed
	 * @param digits
	 *            number of digits to right of decimal point
	 * @param columns
	 *            width of field in characters
	 * @param units
	 *            a string displayed to the right of the field
	 */
	public void addNumericField(String label, double defaultValue, int digits, int columns, String units) {
		String label2 = label;
		if (label2.indexOf('_') != -1)
			label2 = label2.replace('_', ' ');
		Label theLabel = makeLabel(label2);
		c.gridx = 0;
		c.gridy = y;
		c.anchor = GridBagConstraints.EAST;
		c.gridwidth = 1;
		if (firstNumericField)
			c.insets = getInsets(5, 0, 3, 0);
		else
			c.insets = getInsets(0, 0, 3, 0);
		grid.setConstraints(theLabel, c);
		add(theLabel);
		if (numberField == null) {
			numberField = new Vector(5);
			defaultValues = new Vector(5);
			defaultText = new Vector(5);
		}
		columns -= 2;
		if (columns < 1)
			columns = 1;
		String defaultString = d2s(defaultValue, digits);
		if (Double.isNaN(defaultValue))
			defaultString = "";
		TextField tf = new TextField(defaultString, columns);
		tf.addActionListener(this);
		tf.addTextListener(this);
		tf.addFocusListener(this);
		tf.addKeyListener(this);
		numberField.addElement(tf);
		defaultValues.addElement(new Double(defaultValue));
		defaultText.addElement(tf.getText());
		c.gridx = 1;
		c.gridy = y;
		c.anchor = GridBagConstraints.WEST;
		tf.setEditable(true);
		// if (firstNumericField) tf.selectAll();
		firstNumericField = false;
		if (units == null || units.equals("")) {
			grid.setConstraints(tf, c);
			add(tf);
		} else {
			Panel panel = new Panel();
			panel.setLayout(new FlowLayout(FlowLayout.LEFT, 0, 0));
			panel.add(tf);
			panel.add(new Label(" " + units));
			grid.setConstraints(panel, c);
			add(panel);
		}

		y++;
	}

	private Label makeLabel(String label) {
		return new Label(label);
	}

	private void saveLabel(Object component, String label) {
		if (labels == null)
			labels = new Hashtable();
		if (label.length() > 0) {
			if (label.charAt(0) == ' ')
				label = label.trim();
			labels.put(component, label);
		}
	}

	/**
	 * Adds an 8 column text field.
	 * 
	 * @param label
	 *            the label
	 * @param defaultText
	 *            the text initially displayed
	 */
	public void addStringField(String label, String defaultText) {
		addStringField(label, defaultText, 8);
	}

	/**
	 * Adds a text field.
	 * 
	 * @param label
	 *            the label
	 * @param defaultText
	 *            text initially displayed
	 * @param columns
	 *            width of the text field
	 */
	public void addStringField(String label, String defaultText, int columns) {
		String label2 = label;
		if (label2.indexOf('_') != -1)
			label2 = label2.replace('_', ' ');
		Label theLabel = makeLabel(label2);
		c.gridx = 0;
		c.gridy = y;
		c.anchor = GridBagConstraints.EAST;
		c.gridwidth = 1;
		boolean custom = customInsets;
		if (stringField == null) {
			stringField = new Vector(4);
			defaultStrings = new Vector(4);
			c.insets = getInsets(5, 0, 5, 0);
		} else
			c.insets = getInsets(0, 0, 5, 0);
		grid.setConstraints(theLabel, c);
		add(theLabel);
		if (custom) {
			if (stringField.size() == 0)
				c.insets = getInsets(5, 0, 5, 0);
			else
				c.insets = getInsets(0, 0, 5, 0);
		}
		TextField tf = new TextField(defaultText, columns);

		tf.setEchoChar(echoChar);
		echoChar = 0;
		tf.addActionListener(this);
		tf.addTextListener(this);
		tf.addFocusListener(this);
		tf.addKeyListener(this);
		c.gridx = 1;
		c.gridy = y;
		c.anchor = GridBagConstraints.WEST;
		grid.setConstraints(tf, c);
		tf.setEditable(true);
		add(tf);
		stringField.addElement(tf);
		defaultStrings.addElement(defaultText);

		y++;
	}

	/** Sets the echo character for the next string field. */
	public void setEchoChar(char echoChar) {
		this.echoChar = echoChar;
	}

	/**
	 * Adds a checkbox; does not make it recordable if isPreview is true. With
	 * isPreview true, the checkbox can be referred to as previewCheckbox from
	 * hereon.
	 */
	private void addCheckbox(String label, boolean defaultValue) {
		String label2 = label;
		if (label2.indexOf('_') != -1)
			label2 = label2.replace('_', ' ');
		if (checkbox == null) {
			checkbox = new Vector(4);
			c.insets = getInsets(15, 20, 0, 0);
		} else
			c.insets = getInsets(0, 20, 0, 0);
		c.gridx = 0;
		c.gridy = y;
		c.gridwidth = 2;
		c.anchor = GridBagConstraints.WEST;
		Checkbox cb = new Checkbox(label2);
		grid.setConstraints(cb, c);
		cb.setState(defaultValue);
		cb.addItemListener(this);
		cb.addKeyListener(this);
		add(cb);
		checkbox.addElement(cb);
		saveLabel(cb, label);
		y++;
	}

	/**
	 * Adds a group of checkboxs using a grid layout.
	 * 
	 * @param rows
	 *            the number of rows
	 * @param columns
	 *            the number of columns
	 * @param labels
	 *            the labels
	 * @param defaultValues
	 *            the initial states
	 */
	public void addCheckboxGroup(int rows, int columns, String[] labels, boolean[] defaultValues) {
		addCheckboxGroup(rows, columns, labels, defaultValues, null);
	}

	/**
	 * Adds a group of checkboxs using a grid layout.
	 * 
	 * @param rows
	 *            the number of rows
	 * @param columns
	 *            the number of columns
	 * @param labels
	 *            the labels
	 * @param defaultValues
	 *            the initial states
	 * @param headings
	 *            the column headings Example:
	 *            http://imagej.nih.gov/ij/plugins/multi-column-dialog/index.html
	 */
	public void addCheckboxGroup(int rows, int columns, String[] labels, boolean[] defaultValues, String[] headings) {
		Panel panel = new Panel();
		int nRows = headings != null ? rows + 1 : rows;
		panel.setLayout(new GridLayout(nRows, columns, 6, 0));
		int startCBIndex = cbIndex;
		if (checkbox == null)
			checkbox = new Vector(12);
		if (headings != null) {
			Font font = new Font("SansSerif", Font.BOLD, 12);
			for (int i = 0; i < columns; i++) {
				if (i > headings.length - 1 || headings[i] == null)
					panel.add(new Label(""));
				else {
					Label label = new Label(headings[i]);
					label.setFont(font);
					panel.add(label);
				}
			}
		}
		int i1 = 0;
		int[] index = new int[labels.length];
		for (int row = 0; row < rows; row++) {
			for (int col = 0; col < columns; col++) {
				int i2 = col * rows + row;
				if (i2 >= labels.length)
					break;
				index[i1] = i2;
				String label = labels[i1];
				if (label == null || label.length() == 0) {
					Label lbl = new Label("");
					panel.add(lbl);
					i1++;
					continue;
				}
				if (label.indexOf('_') != -1)
					label = label.replace('_', ' ');
				Checkbox cb = new Checkbox(label);
				checkbox.addElement(cb);
				cb.setState(defaultValues[i1]);
				cb.addItemListener(this);
				panel.add(cb);
				i1++;
			}
		}
		c.gridx = 0;
		c.gridy = y;
		c.gridwidth = 2;
		c.anchor = GridBagConstraints.WEST;
		c.insets = getInsets(10, 0, 0, 0);
		grid.setConstraints(panel, c);
		add(panel);
		y++;
	}

	/**
	 * Adds a radio button group.
	 * 
	 * @param label
	 *            group label (or null)
	 * @param items
	 *            radio button labels
	 * @param rows
	 *            number of rows
	 * @param columns
	 *            number of columns
	 * @param defaultItem
	 *            button initially selected
	 */
	public void addRadioButtonGroup(String label, String[] items, int rows, int columns, String defaultItem) {
		Panel panel = new Panel();
		int n = items.length;
		panel.setLayout(new GridLayout(rows, columns, 0, 0));
		CheckboxGroup cg = new CheckboxGroup();
		for (int i = 0; i < n; i++) {
			Checkbox cb = new Checkbox(items[i], cg, items[i].equals(defaultItem));
			cb.addItemListener(this);
			panel.add(cb);
		}
		if (radioButtonGroups == null)
			radioButtonGroups = new Vector();
		radioButtonGroups.addElement(cg);
		Insets insets = getInsets(5, 10, 0, 0);
		if (label == null || label.equals("")) {
			label = "rbg" + radioButtonGroups.size();
			insets.top += 5;
		} else {
			setInsets(10, insets.left, 0);
			addMessage(label);
			insets.top = 2;
			insets.left += 10;
		}
		c.gridx = 0;
		c.gridy = y;
		c.gridwidth = 2;
		c.anchor = GridBagConstraints.WEST;
		c.insets = new Insets(insets.top, insets.left, 0, 0);
		grid.setConstraints(panel, c);
		add(panel);
		y++;
	}

	/**
	 * Adds a popup menu.
	 * 
	 * @param label
	 *            the label
	 * @param items
	 *            the menu items
	 * @param defaultItem
	 *            the menu item initially selected
	 */
	public void addChoice(String label, String[] items, String defaultItem) {
		String label2 = label;
		if (label2.indexOf('_') != -1)
			label2 = label2.replace('_', ' ');
		Label theLabel = makeLabel(label2);
		c.gridx = 0;
		c.gridy = y;
		c.anchor = GridBagConstraints.EAST;
		c.gridwidth = 1;
		if (choice == null) {
			choice = new Vector(4);
			defaultChoiceIndexes = new Vector(4);
			c.insets = getInsets(5, 0, 5, 0);
		} else
			c.insets = getInsets(0, 0, 5, 0);
		grid.setConstraints(theLabel, c);
		add(theLabel);
		Choice thisChoice = new Choice();
		thisChoice.addKeyListener(this);
		thisChoice.addItemListener(this);
		for (int i = 0; i < items.length; i++)
			thisChoice.addItem(items[i]);
		if (defaultItem != null)
			thisChoice.select(defaultItem);
		else
			thisChoice.select(0);
		c.gridx = 1;
		c.gridy = y;
		c.anchor = GridBagConstraints.WEST;
		grid.setConstraints(thisChoice, c);
		add(thisChoice);
		choice.addElement(thisChoice);
		int index = thisChoice.getSelectedIndex();
		defaultChoiceIndexes.addElement(new Integer(index));
		y++;
	}

	/** Adds a message consisting of one or more lines of text. */
	public void addMessage(String text) {
		addMessage(text, null, null);
	}

	/**
	 * Adds a message consisting of one or more lines of text, which will be
	 * displayed using the specified font.
	 */
	public void addMessage(String text, Font font) {
		addMessage(text, font, null);
	}

	/**
	 * Adds a message consisting of one or more lines of text, which will be
	 * displayed using the specified font and color.
	 */
	public void addMessage(String text, Font font, Color color) {
		theLabel = null;
		// if (text.indexOf('\n') >= 0)
		// theLabel = new MultiLineLabel(text);
		// else
		theLabel = new Label(text);
		// theLabel.addKeyListener(this);
		c.gridx = 0;
		c.gridy = y;
		c.gridwidth = 2;
		c.anchor = GridBagConstraints.WEST;
		c.insets = getInsets(text.equals("") ? 0 : 10, 20, 0, 0);
		c.fill = GridBagConstraints.HORIZONTAL;
		grid.setConstraints(theLabel, c);
		if (font != null)
			theLabel.setFont(font);
		if (color != null)
			theLabel.setForeground(color);
		add(theLabel);
		c.fill = GridBagConstraints.NONE;
		y++;
	}

	/**
	 * Adds one or two (side by side) text areas.
	 * 
	 * @param text1
	 *            initial contents of the first text area
	 * @param text2
	 *            initial contents of the second text area or null
	 * @param rows
	 *            the number of rows
	 * @param columns
	 *            the number of columns
	 */
	public void addTextAreas(String text1, String text2, int rows, int columns) {
		if (textArea1 != null)
			return;
		Panel panel = new Panel();
		Font font = new Font("SansSerif", Font.PLAIN, 14);
		textArea1 = new TextArea(text1, rows, columns, TextArea.SCROLLBARS_NONE);
		textArea1.setFont(font);
		textArea1.addTextListener(this);
		panel.add(textArea1);
		if (text2 != null) {
			textArea2 = new TextArea(text2, rows, columns, TextArea.SCROLLBARS_NONE);
			textArea2.setFont(font);
			panel.add(textArea2);
		}
		c.gridx = 0;
		c.gridy = y;
		c.gridwidth = 2;
		c.anchor = GridBagConstraints.WEST;
		c.insets = getInsets(15, 20, 0, 0);
		grid.setConstraints(panel, c);
		add(panel);
		y++;
	}

	/**
	 * Adds a slider (scroll bar) to the dialog box. Floating point values will
	 * be used if (maxValue-minValue)<=5.0 and either minValue or maxValue are
	 * non-integer.
	 * 
	 * @param label
	 *            the label
	 * @param minValue
	 *            the minimum value of the slider
	 * @param maxValue
	 *            the maximum value of the slider
	 * @param defaultValue
	 *            the initial value of the slider
	 */
	public void addSlider(String label, double minValue, double maxValue, double defaultValue) {
		if (defaultValue < minValue)
			defaultValue = minValue;
		if (defaultValue > maxValue)
			defaultValue = maxValue;
		int columns = 4;
		int digits = 0;
		double scale = 1.0;
		if ((maxValue - minValue) <= 5.0 && (minValue != (int) minValue || maxValue != (int) maxValue || defaultValue != (int) defaultValue)) {
			scale = 20.0;
			minValue *= scale;
			maxValue *= scale;
			defaultValue *= scale;
			digits = 2;
		}
		String label2 = label;
		if (label2.indexOf('_') != -1)
			label2 = label2.replace('_', ' ');
		Label theLabel = makeLabel(label2);
		c.gridx = 0;
		c.gridy = y;
		c.anchor = GridBagConstraints.EAST;
		c.gridwidth = 1;
		c.insets = new Insets(0, 0, 3, 0);
		grid.setConstraints(theLabel, c);
		add(theLabel);

		if (slider == null) {
			slider = new Vector(5);
			sliderIndexes = new Vector(5);
			sliderScales = new Vector(5);
		}
		Scrollbar s = new Scrollbar(Scrollbar.HORIZONTAL, (int) defaultValue, 1, (int) minValue, (int) maxValue + 1);
		slider.addElement(s);
		s.addAdjustmentListener(this);
		s.setUnitIncrement(1);

		if (numberField == null) {
			numberField = new Vector(5);
			defaultValues = new Vector(5);
			defaultText = new Vector(5);
		}
		columns -= 2;
		if (columns < 1)
			columns = 1;
		TextField tf = new TextField(d2s(defaultValue / scale, digits), columns);
		tf.addActionListener(this);
		tf.addTextListener(this);
		tf.addFocusListener(this);
		tf.addKeyListener(this);
		numberField.addElement(tf);
		sliderIndexes.add(new Integer(numberField.size() - 1));
		sliderScales.add(new Double(scale));
		defaultValues.addElement(new Double(defaultValue / scale));
		defaultText.addElement(tf.getText());
		tf.setEditable(true);
		firstSlider = false;

		Panel panel = new Panel();
		GridBagLayout pgrid = new GridBagLayout();
		GridBagConstraints pc = new GridBagConstraints();
		panel.setLayout(pgrid);
		pc.gridx = 0;
		pc.gridy = 0;
		pc.gridwidth = 1;
		pc.ipadx = 85;
		pc.anchor = GridBagConstraints.WEST;
		pgrid.setConstraints(s, pc);
		panel.add(s);
		pc.ipadx = 0; // reset
		// text field
		pc.gridx = 1;
		pc.insets = new Insets(5, 5, 0, 0);
		pc.anchor = GridBagConstraints.EAST;
		pgrid.setConstraints(tf, pc);
		panel.add(tf);

		grid.setConstraints(panel, c);
		c.gridx = 1;
		c.gridy = y;
		c.gridwidth = 1;
		c.anchor = GridBagConstraints.WEST;
		c.insets = new Insets(0, 0, 0, 0);
		grid.setConstraints(panel, c);
		add(panel);
		y++;
	}

	/** Adds a Panel to the dialog. */
	public void addPanel(Panel panel) {
		addPanel(panel, GridBagConstraints.WEST, getInsets(5, 0, 0, 0));
	}

	/**
	 * Adds a Panel to the dialog with custom contraint and insets. The defaults
	 * are GridBagConstraints.WEST (left justified) and "new Insets(5, 0, 0, 0)"
	 * (5 pixels of padding at the top).
	 */
	public void addPanel(Panel panel, int constraints, Insets insets) {
		c.gridx = 0;
		c.gridy = y;
		c.gridwidth = 2;
		c.anchor = constraints;
		c.insets = insets;
		grid.setConstraints(panel, c);
		add(panel);
		y++;
	}

	/**
	 * Set the insets (margins), in pixels, that will be used for the next
	 * component added to the dialog.
	 * 
	 * <pre>
	 Default insets:
	     addMessage: 0,20,0 (empty string) or 10,20,0
	     addCheckbox: 15,20,0 (first checkbox) or 0,20,0
	     addCheckboxGroup: 10,0,0 
	     addRadioButtonGroup: 5,10,0 
	     addNumericField: 5,0,3 (first field) or 0,0,3
	     addStringField: 5,0,5 (first field) or 0,0,5
	     addChoice: 5,0,5 (first field) or 0,0,5
	 * </pre>
	 */
	public void setInsets(int top, int left, int bottom) {
		topInset = top;
		leftInset = left;
		bottomInset = bottom;
		customInsets = true;
	}

	/** Sets a replacement label for the "OK" button. */
	public void setOKLabel(String label) {
		okLabel = label;
	}

	/** Sets a replacement label for the "Cancel" button. */
	public void setCancelLabel(String label) {
		cancelLabel = label;
	}

	/** Sets a replacement label for the "Help" button. */
	public void setHelpLabel(String label) {
		helpLabel = label;
	}

	/** Unchanged parameters are not recorder in 'smart recording' mode. */
	public void setSmartRecording(boolean smartRecording) {
		this.smartRecording = smartRecording;
	}

	/** Make this a "Yes No Cancel" dialog. */
	public void enableYesNoCancel() {
		enableYesNoCancel(" Yes ", " No ");
	}

	/**
	 * Make this a "Yes No Cancel" dialog with custom labels. Here is an
	 * example:
	 * 
	 * <pre>
	 * GenericDialog gd = new GenericDialog("YesNoCancel Demo");
	 * gd.addMessage("This is a custom YesNoCancel dialog");
	 * gd.enableYesNoCancel("Do something", "Do something else");
	 * gd.showDialog();
	 * if (gd.wasCanceled())
	 * 	IJ.log("User clicked 'Cancel'");
	 * else if (gd.wasOKed())
	 * 	IJ.log("User clicked 'Yes'");
	 * else
	 * 	IJ.log("User clicked 'No'");
	 * </pre>
	 */
	public void enableYesNoCancel(String yesLabel, String noLabel) {
		this.yesLabel = yesLabel;
		this.noLabel = noLabel;
		yesNoCancel = true;
	}

	/** No not display "Cancel" button. */
	public void hideCancelButton() {
		hideCancelButton = true;
	}

	Insets getInsets(int top, int left, int bottom, int right) {
		if (customInsets) {
			customInsets = false;
			return new Insets(topInset, leftInset, bottomInset, 0);
		} else
			return new Insets(top, left, bottom, right);
	}

	/**
	 * Add an Object implementing the DialogListener interface. This object will
	 * be notified by its dialogItemChanged method of input to the dialog. The
	 * first DialogListener will be also called after the user has typed 'OK' or
	 * if the dialog has been invoked by a macro; it should read all input
	 * fields of the dialog. For other listeners, the OK button will not cause a
	 * call to dialogItemChanged; the CANCEL button will never cause such a
	 * call.
	 * 
	 * @param dl
	 *            the Object that wants to listen.
	 */
	public void addDialogListener(DialogListener dl) {
		if (dialogListeners == null)
			dialogListeners = new Vector();
		dialogListeners.addElement(dl);
	}

	/** Returns true if the user clicked on "Cancel". */
	public boolean wasCanceled() {
		return wasCanceled;
	}

	/** Returns true if the user has clicked on "OK" or a macro is running. */
	public boolean wasOKed() {
		return wasOKed;
	}

	/**
	 * Returns the contents of the next numeric field, or NaN if the field does
	 * not contain a number.
	 */
	public double getNextNumber() {
		if (numberField == null)
			return -1.0;
		TextField tf = (TextField) numberField.elementAt(nfIndex);
		String theText = tf.getText();
		String label = null;
		String originalText = (String) defaultText.elementAt(nfIndex);
		double defaultValue = ((Double) (defaultValues.elementAt(nfIndex))).doubleValue();
		double value;
		boolean skipRecording = false;
		if (theText.equals(originalText)) {
			value = defaultValue;
			if (smartRecording)
				skipRecording = true;
		} else {
			Double d = getValue(theText);
			if (d != null)
				value = d.doubleValue();
			else {
				value = Double.NaN;
				if (Double.isNaN(value)) {
					invalidNumber = true;
					errorMessage = "\"" + theText + "\" is an invalid number";
					value = Double.NaN;
				}
			}
		}

		nfIndex++;
		return value;
	}

	private String trim(String value) {
		if (value.endsWith(".0"))
			value = value.substring(0, value.length() - 2);
		if (value.endsWith(".00"))
			value = value.substring(0, value.length() - 3);
		return value;
	}

	protected Double getValue(String text) {
		Double d;
		try {
			d = new Double(text);
		} catch (NumberFormatException e) {
			d = null;
		}
		return d;
	}

	public double parseDouble(String s) {
		if (s == null)
			return Double.NaN;
		double value = Double.parseDouble(s);
		if (Double.isNaN(value)) {
			if (s.startsWith("&"))
				s = s.substring(1);
			value = Double.NaN;
		}
		return value;
	}

	/**
	 * Returns true if one or more of the numeric fields contained an invalid
	 * number. Must be called after one or more calls to getNextNumber().
	 */
	public boolean invalidNumber() {
		boolean wasInvalid = invalidNumber;
		invalidNumber = false;
		return wasInvalid;
	}

	/**
	 * Returns an error message if getNextNumber was unable to convert a string
	 * into a number, otherwise, returns null.
	 */
	public String getErrorMessage() {
		return errorMessage;
	}

	/** Returns the contents of the next text field. */
	public String getNextString() {
		String theText;
		if (stringField == null)
			return "";
		TextField tf = (TextField) (stringField.elementAt(sfIndex));
		theText = tf.getText();

		sfIndex++;
		return theText;
	}

	/** Returns the state of the next checkbox. */
	public boolean getNextBoolean() {
		if (checkbox == null)
			return false;
		Checkbox cb = (Checkbox) (checkbox.elementAt(cbIndex));
		boolean state = cb.getState();
		cbIndex++;
		return state;
	}

	// Returns true if s2 is in s1 and not in a bracketed literal (e.g.,
	// "[literal]")
	boolean isMatch(String s1, String s2) {
		if (s1.startsWith(s2))
			return true;
		s2 = " " + s2;
		int len1 = s1.length();
		int len2 = s2.length();
		boolean match, inLiteral = false;
		char c;
		for (int i = 0; i < len1 - len2 + 1; i++) {
			c = s1.charAt(i);
			if (inLiteral && c == ']')
				inLiteral = false;
			else if (c == '[')
				inLiteral = true;
			if (c != s2.charAt(0) || inLiteral || (i > 1 && s1.charAt(i - 1) == '='))
				continue;
			match = true;
			for (int j = 0; j < len2; j++) {
				if (s2.charAt(j) != s1.charAt(i + j)) {
					match = false;
					break;
				}
			}
			if (match)
				return true;
		}
		return false;
	}

	/** Returns the selected item in the next popup menu. */
	public String getNextChoice() {
		if (choice == null)
			return "";
		Choice thisChoice = (Choice) (choice.elementAt(choiceIndex));
		String item = thisChoice.getSelectedItem();
		choiceIndex++;
		return item;
	}

	/** Returns the index of the selected item in the next popup menu. */
	public int getNextChoiceIndex() {
		if (choice == null)
			return -1;
		Choice thisChoice = (Choice) (choice.elementAt(choiceIndex));
		int index = thisChoice.getSelectedIndex();
		choiceIndex++;
		return index;
	}

	/** Returns the selected item in the next radio button group. */
	public String getNextRadioButton() {
		if (radioButtonGroups == null)
			return null;
		CheckboxGroup cg = (CheckboxGroup) (radioButtonGroups.elementAt(radioButtonIndex));
		radioButtonIndex++;
		Checkbox checkbox = cg.getSelectedCheckbox();
		String item = "null";
		if (checkbox != null)
			item = checkbox.getLabel();

		return item;
	}

	private String getChoiceVariable(String item) {
		item = item.substring(1);
		String s = null;
		if (s == null) {
			double value = Double.NaN;
			if (!Double.isNaN(value)) {
				if ((int) value == value)
					s = "" + (int) value;
				else
					s = "" + value;
			}
		}
		if (s != null)
			item = s;
		return item;
	}

	/** Returns the contents of the next textarea. */
	public String getNextText() {
		String text;
		if (textAreaIndex == 0 && textArea1 != null) {
			// textArea1.selectAll();
			text = textArea1.getText();
			textAreaIndex++;
		} else if (textAreaIndex == 1 && textArea2 != null) {
			textArea2.selectAll();
			text = textArea2.getText();
			textAreaIndex++;
		} else
			text = null;
		return text;
	}

	/** Displays this dialog box. */
	public void showDialog() {

		Panel buttons = new Panel();
		buttons.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 0));
		cancel = new Button(cancelLabel);
		cancel.addActionListener(this);
		cancel.addKeyListener(this);
		if (yesNoCancel) {
			okLabel = yesLabel;
			no = new Button(noLabel);
			no.addActionListener(this);
			no.addKeyListener(this);
		}
		okay = new Button(okLabel);
		okay.addActionListener(this);
		okay.addKeyListener(this);
		boolean addHelp = helpURL != null;
		if (addHelp) {
			help = new Button(helpLabel);
			help.addActionListener(this);
			help.addKeyListener(this);
		}

		buttons.add(okay);
		if (yesNoCancel)
			buttons.add(no);
		;
		if (!hideCancelButton)
			buttons.add(cancel);
		if (addHelp)
			buttons.add(help);

		c.gridx = 0;
		c.gridy = y;
		c.anchor = GridBagConstraints.EAST;
		c.gridwidth = 2;
		c.insets = new Insets(15, 0, 0, 0);
		grid.setConstraints(buttons, c);
		add(buttons);

		pack();
		setup();
		// if (centerDialog)
		// GUI.center(this);
		setVisible(true);
		wait(25);

		/*
		 * For plugins that read their input only via dialogItemChanged, call it
		 * at least once
		 */
		if (!wasCanceled && dialogListeners != null && dialogListeners.size() > 0) {
			resetCounters();
			((DialogListener) dialogListeners.elementAt(0)).dialogItemChanged(this, null);
		}
		resetCounters();
	}

	/** Reset the counters before reading the dialog parameters */
	private void resetCounters() {
		nfIndex = 0; // prepare for readout
		sfIndex = 0;
		cbIndex = 0;
		choiceIndex = 0;
		textAreaIndex = 0;
		radioButtonIndex = 0;
		invalidNumber = false;
	}

	/** Returns the Vector containing the numeric TextFields. */
	public Vector getNumericFields() {
		return numberField;
	}

	/** Returns the Vector containing the string TextFields. */
	public Vector getStringFields() {
		return stringField;
	}

	/** Returns the Vector containing the Checkboxes. */
	public Vector getCheckboxes() {
		return checkbox;
	}

	/** Returns the Vector containing the Choices. */
	public Vector getChoices() {
		return choice;
	}

	/** Returns the Vector containing the sliders (Scrollbars). */
	public Vector getSliders() {
		return slider;
	}

	/** Returns the Vector that contains the RadioButtonGroups. */
	public Vector getRadioButtonGroups() {
		return radioButtonGroups;
	}

	/** Returns a reference to textArea1. */
	public TextArea getTextArea1() {
		return textArea1;
	}

	/** Returns a reference to textArea2. */
	public TextArea getTextArea2() {
		return textArea2;
	}

	/**
	 * Returns a reference to the Label or MultiLineLabel created by the last
	 * addMessage() call, or null if addMessage() was not called.
	 */
	public Component getMessage() {
		return theLabel;
	}

	/**
	 * Returns references to the "OK" ("Yes"), "Cancel", and if present, "No"
	 * buttons as an array.
	 */
	public Button[] getButtons() {
		Button[] buttons = new Button[3];
		buttons[0] = okay;
		buttons[1] = cancel;
		buttons[2] = no;
		return buttons;
	}

	/** Display dialog centered on the primary screen. */
	public void centerDialog(boolean b) {
		centerDialog = b;
	}

	/* Display the dialog at the specified location. */
	public void setLocation(int x, int y) {
		super.setLocation(x, y);
		centerDialog = false;
	}

	public void setDefaultString(int index, String str) {
		if (defaultStrings != null && index >= 0 && index < defaultStrings.size())
			defaultStrings.set(index, str);
	}

	protected void setup() {
	}

	public void actionPerformed(ActionEvent e) {
		Object source = e.getSource();
		if (source == okay || source == cancel | source == no) {
			wasCanceled = source == cancel;
			wasOKed = source == okay;
			dispose();
		} else if (source == help) {
			if (hideCancelButton) {
				if (helpURL != null && helpURL.equals("")) {
					notifyListeners(e);
					return;
				} else {
					wasOKed = true;
					dispose();
				}
			}
			showHelp();
		} else
			notifyListeners(e);
	}

	public void textValueChanged(TextEvent e) {
		notifyListeners(e);
		if (slider == null)
			return;
		Object source = e.getSource();
		for (int i = 0; i < slider.size(); i++) {
			int index = ((Integer) sliderIndexes.get(i)).intValue();
			if (source == numberField.elementAt(index)) {
				TextField tf = (TextField) numberField.elementAt(index);
				double value = Double.parseDouble(tf.getText());
				if (!Double.isNaN(value)) {
					Scrollbar sb = (Scrollbar) slider.elementAt(i);
					double scale = ((Double) sliderScales.get(i)).doubleValue();
					sb.setValue((int) (value * scale));
				}
			}
		}
	}

	public void itemStateChanged(ItemEvent e) {
		notifyListeners(e);
	}

	public void focusGained(FocusEvent e) {
		Component c = e.getComponent();
		// IJ.log("focusGained: "+c);
		if (c instanceof TextField)
			((TextField) c).selectAll();
	}

	public void focusLost(FocusEvent e) {
		Component c = e.getComponent();
		if (c instanceof TextField)
			((TextField) c).select(0, 0);
	}

	public void keyPressed(KeyEvent e) {
		int keyCode = e.getKeyCode();
		if (keyCode == KeyEvent.VK_ENTER && textArea1 == null && okay != null && okay.isEnabled()) {
			wasOKed = true;
			dispose();
		} else if (keyCode == KeyEvent.VK_ESCAPE) {
			wasCanceled = true;
			dispose();
		} else if (keyCode == KeyEvent.VK_W && (e.getModifiers() & Toolkit.getDefaultToolkit().getMenuShortcutKeyMask()) != 0) {
			wasCanceled = true;
			dispose();
		}
	}

	void accessTextFields() {
		if (stringField != null) {
			for (int i = 0; i < stringField.size(); i++)
				((TextField) (stringField.elementAt(i))).getText();
		}
		if (numberField != null) {
			for (int i = 0; i < numberField.size(); i++)
				((TextField) (numberField.elementAt(i))).getText();
		}
	}

	public void keyReleased(KeyEvent e) {
	}

	public void keyTyped(KeyEvent e) {
	}

	public Insets getInsets() {
		Insets i = super.getInsets();
		return new Insets(i.top + 10, i.left + 10, i.bottom + 10, i.right + 10);
	}

	public synchronized void adjustmentValueChanged(AdjustmentEvent e) {
		Object source = e.getSource();
		for (int i = 0; i < slider.size(); i++) {
			if (source == slider.elementAt(i)) {
				Scrollbar sb = (Scrollbar) source;
				int index = ((Integer) sliderIndexes.get(i)).intValue();
				TextField tf = (TextField) numberField.elementAt(index);
				double scale = ((Double) sliderScales.get(i)).doubleValue();
				int digits = scale == 1.0 ? 0 : 2;
				tf.setText("" + d2s(sb.getValue() / scale, digits));
			}
		}
	}

	/**
	 * Notify any DialogListeners of changes having occurred If a listener
	 * returns false, do not call further listeners and disable the OK button
	 * and preview Checkbox (if it exists). For PlugInFilters, this ensures that
	 * the PlugInFilterRunner, which listens as the last one, is not called if
	 * the PlugInFilter has detected invalid parameters. Thus, unnecessary
	 * calling the run(ip) method of the PlugInFilter for preview is avoided in
	 * that case.
	 */
	private void notifyListeners(AWTEvent e) {
		if (dialogListeners == null)
			return;
		boolean everythingOk = true;
		for (int i = 0; everythingOk && i < dialogListeners.size(); i++)
			try {
				resetCounters();
				if (!((DialogListener) dialogListeners.elementAt(i)).dialogItemChanged(this, e))
					everythingOk = false;
			} // disable further listeners if false (invalid parameters)
				// returned
			catch (Exception err) { // for exceptions, don't cover the input by
									// a window but
				System.out.println("ERROR: " + err + "\nin DialogListener of " + dialogListeners.elementAt(i) + "\nat " + (err.getStackTrace()[0]) + "\nfrom " + (err.getStackTrace()[1])); // requires
				// Java
				// 1.4
			}
		if (okay != null)
			okay.setEnabled(everythingOk);
	}

	public void repaint() {
		super.repaint();
	}

	public void paint(Graphics g) {
		super.paint(g);
	}

	public static void wait(int msecs) {
		try {
			Thread.sleep(msecs);
		} catch (InterruptedException e) {
		}
	}

	public void windowClosing(WindowEvent e) {
		wasCanceled = true;
		dispose();
	}

	/**
	 * Adds a "Help" button that opens the specified URL in the default browser.
	 * With v1.46b or later, displays an HTML formatted message if 'url' starts
	 * with "<html>". There is an example at
	 * http://imagej.nih.gov/ij/macros/js/DialogWithHelp.js
	 */
	public void addHelp(String url) {
		helpURL = url;
	}

	void showHelp() {
		// if (helpURL.startsWith("<html>"))
		// new HTMLDialog(this, "", helpURL);
	}

	public static GenericDialog getInstance() {
		return instance;
	}

	public void dispose() {
		super.dispose();
		instance = null;
	}

	public void windowActivated(WindowEvent e) {
	}

	public void windowOpened(WindowEvent e) {
	}

	public void windowClosed(WindowEvent e) {
	}

	public void windowIconified(WindowEvent e) {
	}

	public void windowDeiconified(WindowEvent e) {
	}

	public void windowDeactivated(WindowEvent e) {
	}

}